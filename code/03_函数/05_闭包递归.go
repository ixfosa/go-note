package main

import "fmt"

/******************闭包详解*********************/
/*
闭包是由函数及其相关引用环境组合而成的实体(即：闭包=函数+引用环境)。

“官方”的解释是：所谓“闭包”，指的是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。

维基百科讲，闭包（Closure），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。
所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。

看着上面的描述，会发现闭包和匿名函数似乎有些像。可是可能还是有些云里雾里的。
因为跳过闭包的创建过程直接理解闭包的定义是非常困难的。
目前在JavaScript、Go、PHP、Scala、Scheme、Common Lisp、Smalltalk、Groovy、Ruby、 Python、Lua、objective c、Swift
以及Java8以上等语言中都能找到对闭包不同程度的支持。通过支持闭包的语法可以发现一个特点，他们都有垃圾回收(GC)机制。
javascript应该是普及度比较高的编程语言了，通过这个来举例应该好理解写。看下面的代码，只要关注script里方法的定义和调用就可以了。
 */


/***************************************/
/*
<script>
	function a(){
		var i=0;
		function b(){
			console.log(++i);
			document.write("<h1>"+i+"</h1>");
		}
		return b;
	}

	$(function(){
		var c=a();
		c();
		c();
		c();
		//a(); //不会有信息输出
		document.write("<h1>=============</h1>");
		var c2=a();
		c2();
		c2();
	});
</script>
函数b嵌套在函数a内部 函数a返回函数b 这样在执行完var c=a()后，变量c实际上是指向了函数b()，
再执行函数c()后就会显示i的值，第一次为1，第二次为2，第三次为3，以此类推。
其实，这段代码就创建了一个闭包。因为函数a()外的变量c引用了函数a()内的函数b()，就是说：

当函数a()的内部函数b()被函数a()外的一个变量引用的时候，就创建了一个闭包。
在上面的例子中，由于闭包的存在使得函数a()返回后，a中的i始终存在，这样每次执行c()，i都是自加1后的值。
从上面可以看出闭包的作用就是在a()执行完并返回后，闭包使得Javascript的垃圾回收机制GC不会收回a()所占用的资源，
因为a()的内部函数b()的执行需要依赖a()中的变量i。

在给定函数被多次调用的过程中，这些私有变量能够保持其持久性。
变量的作用域仅限于包含它们的函数，因此无法从其它程序代码部分进行访问。
不过，变量的生存期是可以很长，在一次函数调用期间所创建所生成的值在下次函数调用时仍然存在。
正因为这一特点，闭包可以用来完成信息隐藏，并进而应用于需要状态表达的某些编程范型中。

下面来想象另一种情况，如果a()返回的不是函数b()，情况就完全不同了。因为a()执行完后，b()没有被返回给a()的外界，
只是被a()所引用，而此时a()也只会被b()引 用，因此函数a()和b()互相引用但又不被外界打扰（被外界引用），函数a和b就会被GC回收。
所以直接调用a();是页面并没有信息输出。

下面来说闭包的另一要素引用环境。c()跟c2()引用的是不同的环境，在调用i++时修改的不是同一个i，因此两次的输出都是1。
函数a()每进入一次，就形成了一个新的环境，对应的闭包中，函数都是同一个函数，环境却是引用不同的环境。这和c()和c()的调用顺序都是无关的。
 */


/******************* Go的闭包********************/
func a() func() int {
	i := 0
	b := func() int{
		i++
		fmt.Println(i)
		return i
	}
	return b
}

//闭包复制的是原对象指针，这就很容易解释延迟引用现象。
func test8() func() {
	x := 100
	fmt.Printf("x(%p) = %d\n", &x, x)

	return func() {
		fmt.Printf("x(%p) = %d\n", &x, x)
	}
}
//在汇编层 ，test8 实际返回的是 FuncVal 对象，其中包含了匿名函数地址、闭包对象指针。当调 匿名函数时，只需以某个寄存器传递该对象即可。
//FuncVal { func_address, closure_var_pointer ... }

//引用函数参数 局部变量
func test9(base int) func(a int) int {
	return func(a int) int {
		base += a
		return base
	}
}

func main51() {
	c := a()
	c() //1
	c() //2
	c() //3

	d := test8() //x(0xc0420080f0) = 100
	d() //x(0xc0420080f0) = 100

	t1 := test9(10)
	fmt.Println(t1(1), t1(2)) //11 13
	//此时t1和t2不是一个实体了
	t2 := test9(11)
	fmt.Println(t2(1), t2(2)) //12 14
}

/******************Go 语言递归函数*********************/
/*
递归，就是在运行的过程中调用自己。 一个函数调用自己，就叫做递归函数。

构成递归需具备的条件：
    1.子问题须与原始问题为同样的事，且更为简单。
    2.不能无限制地调用本身，须有个出口，化简为非递归状况处理。
 */

/***************************************/
/*
数字阶乘
一个正整数的阶乘（factorial）是所有小于及等于该数的正整数的积，并且0的阶乘为1。自然数n的阶乘写作n!。1808年，基斯顿·卡曼引进这个表示法。
 */
func factorial(n int) int {
	if n == 1 {
		return 1
	}
	return n * factorial(n - 1)
}

/*
斐波那契数列(Fibonacci)
这个数列从第3项开始，每一项都等于前两项之和。
 */
func fibonaci(n int) int {
	if n == 0 {
		return 0
	}
	if n == 1 {
		return 1
	}
	return fibonaci(n - 1) + fibonaci(n - 2)
}
func main()  {
	fmt.Println("factorial", factorial(6)) //factorial 720

	for i := 0; i < 10; i++ {
		fmt.Printf("%d\n", fibonaci(i))
	}
}
