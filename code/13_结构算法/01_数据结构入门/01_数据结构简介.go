package main

import "fmt"

// 数据结构，直白地理解，就是研究数据的存储方式。

// 数据存储只有一个目的，即为了方便后期对数据的再利用，
// 就如同我们使用数组存储 {1,2,3,4,5} 是为了后期取得它们的加和值，无缘由的数据存储行为是对存储空间的不负责任。

// 数据结构是一门学科，它教会我们 “如何存储具有复杂关系的数据更有助于后期对数据的再利用”。

// -------------------------------------------------------------------------





// 数据结构大致包含以下几种存储结构：
	//- 线性表，还可细分为顺序表、链表、栈和队列
	//- 树结构，包括普通树，二叉树，线索二叉树等
	//- 图存储结构




// -------------------------------------------------------------------------




// 线性表
	// 线性表结构存储的数据往往是可以依次排列的，具备这种“一对一”关系的数据就可以使用线性表来存储。

	// 例如，存储类似 {1,3,5,7,9} 这样的数据时，各元素依次排列，每个元素的前面和后边有且仅有一个元素与之相邻（除首元素和尾元素），
	// 因此可以使用线性表存储。

	// 线性表并不是一种具体的存储结构，它包含顺序存储结构和链式存储结构，是顺序表和链表的统称。



// 顺序表
	// 顺序表，简单地理解，就是常用的数组，只是换了个名字而已，例如使用顺序表存储 {1,3,5,7,9}，如图 1 所示：

	// 由于顺序表结构的底层实现借助的就是数组，因此对于初学者来说，可以把顺序表完全等价为数组，但实则不是这样。
	// 数据结构是研究数据存储方式的一门学科，它囊括的都是各种存储结构，而数组只是各种编程语言中的基本数据类型，并不属于数据结构的范畴。


// 链表
	// 使用顺序表（底层实现靠数组）时，需要提前申请一定大小的存储空间，这块存储空间的物理地址是连续的，如图 1 所示。

	// 链表则完全不同，使用链表存储数据时，是随用随申请，因此数据的存储位置是相互分离的，换句话说，数据的存储位置是随机的。

	// 为了给各个数据块建立“依次排列”的关系，链表给各数据块增设一个指针，每个数据块的指针都指向下一个数据块
	//（最后一个数据块的指针指向 NULL），这样，看似毫无关系的数据块就建立了“依次排列”的关系，也就形成了链表，如图 2 所示：




// 栈和队列
	// 栈和队列隶属于线性表，是特殊的线性表，因为它们对线性表中元素的进出做了明确的要求。

	// 栈中的元素只能从线性表的一端进出（另一端封死），且要遵循 “先入后出” 的原则，即先进栈的元素后出栈。

	// 队列中的元素只能从线性表的一端进，从另一端出，且要遵循 “先入先出” 的特点，即先进队列的元素也要先出队列。





// -------------------------------------------------------------------------




// 树存储结构
	// 树存储结构适合存储具有“一对多”关系的数据。



// -------------------------------------------------------------------------




// 图存储结构
	// 图存储结构适合存储具有“多对多”关系的数据。




func main() {
	// 顺序表
	arr := [3]int{1, 2, 3}
	fmt.Printf("%p \n", &arr[0]) // 0xc04205c0a0
	fmt.Printf("%p \n", &arr[1]) // 0xc04205c0a8
	fmt.Printf("%p \n", &arr[2]) // 0xc04205c0b0



}
